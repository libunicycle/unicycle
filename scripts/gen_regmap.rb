#!/usr/bin/ruby

regname = nil
fieldname = nil
maskstart = nil

filename = ARGV[0]
outf = File.open(filename + ".h", "w")
outf.puts "// Generated by gen_regmap.rb #{filename}"
outf.puts
outf.puts "#pragma once"
outf.puts

for l in File.readlines(filename)
  case l
  when /^ *;(.*)$/ # a comment
    comment = $1.strip
    outf.puts "// " + comment
  when /^(\h+)?: (\w+)( *;(.*))?$/
    # NOTE: register value is hex, field values are decimals. That is the usual datasheet representation
    outf.puts

    num = $1
    regname = $2
    comment = $4
    comment = " // " + comment.strip if comment
    outf.puts "#define REG_#{regname} 0x#{num}#{comment}" if num

    fieldname = nil
    maskstart = nil
  when /^  (\d+): (\w+)( *;(.*))?$/ # single bit register
    num = $1
    fieldname = $2
    comment = $4
    comment = " // " + comment.strip if comment
    outf.puts "#define #{regname}_#{fieldname} ((uint64_t)1 << #{num})#{comment}"

    fieldname = nil
    maskstart = nil
  when /^  (\d+)\.\.(\d+): (\w+)( *;(.*))?$/ # multiple bits register
    maskstart = $1.to_i
    maskfinish = $2.to_i
    mask = ((2 ** (maskfinish - maskstart + 1)) - 1).to_s(16)
    fieldname = $3
    comment = $5
    comment = " // " + comment.strip if comment
    outf.puts "#define #{regname}_#{fieldname}_MASK ((uint64_t)0x#{mask} << #{maskstart})#{comment}"
  when /^    (\d+): (\w+)( *;(.*))?$/ # enum value for
    num = $1
    enumname = $2
    comment = $4
    comment = " // " + comment.strip if comment
    outf.puts "#define #{regname}_#{fieldname}_#{enumname} ((uint64_t)#{num} << #{maskstart})#{comment}"
  end
end

outf.close
